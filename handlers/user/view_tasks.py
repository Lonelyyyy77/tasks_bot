import sqlite3

from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tasks_bot.database.db import DB_NAME

router = Router()


@router.callback_query(lambda c: c.data == 'tasks')
async def show_tasks(callback_query: CallbackQuery):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    cursor.execute("SELECT id, title, description, price, status FROM tasks ORDER BY id DESC")
    tasks = cursor.fetchall()
    conn.close()

    if tasks:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á
        tasks_text = "<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n\n"
        keyboard = InlineKeyboardBuilder()

        for task in tasks:
            task_id, title, description, price, status = task

            status_text = "‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" if status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚ùå –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

            tasks_text += (
                f"üÜî <b>ID:</b> {task_id}\n"
                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} –≥—Ä–∏–≤–µ–Ω\n"
                f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            keyboard.row(
                InlineKeyboardButton(
                    text=f"–û—Ç–º–µ—Ç–∏—Ç—å {task_id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é",
                    callback_data=f"complete_{task_id}"
                )
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback_query.message.answer(
            tasks_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    else:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.")

    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("complete_"))
async def mark_task_completed(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = callback_query.data.split("_")[1]

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    cursor.execute("SELECT title, description, price, status FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()

    if not task:
        await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    title, description, price, status = task

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
        await callback_query.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    cursor.execute("UPDATE tasks SET status = '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ' WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    updated_text = (
        f"üÜî <b>ID:</b> {task_id}\n"
        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n"
        f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ\n"
    )

    await callback_query.message.edit_text(updated_text, parse_mode="HTML")
    await callback_query.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
